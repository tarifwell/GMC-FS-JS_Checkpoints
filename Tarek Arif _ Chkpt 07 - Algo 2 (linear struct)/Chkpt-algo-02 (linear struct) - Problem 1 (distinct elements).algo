/* Problem 1
• Given two sets of elements, find the sum of all distinct elements from the set. 
• Give two Solution to this problem, using a different type of data structures each time.
Example:
Set 1 : [3, 1, 7, 9], 
Set 2: [2, 4, 1, 9, 3]
Output: 13 (distinct elements - 4, 7, 2 )
*/

/*----- Problem 1 - Solution 1 : using Arrays ----- */
ALGORITHM sum_of_distinct_elements_with_Arrays
VAR
    set1, set2 : ARRAY_OF INTEGER[20];
    N, M, i, j, sum: INTEGER;
    find: BOOLEAN;
BEGIN
    //Set dimensions of tables
    Write("Set dimension of first table: ");
    Read(N);
    write("Set dimension of second table: ");
    Read(M);

    //Fill in the 1st table
    Write("Enter values in first table: ");
    i = 0;
    WHILE (i < N) DO
        Write("set1[",i+1,"]= " );
        Read(set1[i]);
        i++;
    END_WHILE

    //Fill in the 2nd table
    Write("Enter values in second table: ");
    i = 0;
    WHILE (i < M) DO
        Write("set2[",i+1,"]= " );
        Read(set2[i]);
        i++;
    END_WHILE

    //Operation: sum of different elements in two tables
    sum := 0;
    FOR i FROM 0 TO N-1 DO
        find := FALSE;
        FOR j FROM 0 TO M-1 DO
            IF (set1[i]=set2[j]) THEN
                find = TRUE;
                break;
            END_IF
            IF (NOT(find)) THEN
                sum := sum + set1[i];
            END_IF
        END_FOR
    END_FOR

    FOR i FROM 0 TO M-1 DO
        find := FALSE;
        FOR j FROM 0 TO N-1 DO
            IF (set2[i]=set1[j]) THEN
                find = TRUE;
                break;
            END_IF
            IF (NOT(find)) THEN
                sum := sum + set2[i];
            END_IF
        END_FOR
    END_FOR

    //The sum of elements
    Write("Sum of distinct elements = ", sum);
END

/*----- Problem 1 - Solution 2 : using Hash Table ----- */
ALGORITHM sum_of_distinct_elements_with_HashTable
VAR
    set1, set2 : ARRAY_OF INTEGER[20];
    setKeys : ARRAY_OF INTEGER[40];
    dic : HASH_TABLE<INTEGER,INTEGER>;
    N, M, i, count, sum: INTEGER;
    find: BOOLEAN;
BEGIN
    //Set dimensions of tables
    Write("Set dimension of first table: ");
    Read(N);
    Write("Set dimension of second table: ");
    Read(M);

    //Fill in the 1st table
    Write("Enter values in first table: ");
    i = 0;
    WHILE (i < N) DO
        Write("set1[",i,"]= " );
        Read(set1[i]);
        i++;
    END_WHILE

    //Fill in the 2nd table
    Write("Enter values in second table: ");
    i = 0;
    WHILE (i < M) DO
        Write("set2[",i,"]= " );
        Read(set2[i]);
        i++;
    END_WHILE

    //Creation of Hash Table
    FOR i FROM 0 TO N-1 DO
        IF (dic.lookup(set1[i])=TRUE) THEN
            count := dic.get(set1[i]);
            dic.insert(set1[i], count+1)
        ELSE
           dic.insert(set1[i], 1);
        END_IF
    END_FOR

    FOR i FROM 0 TO M-1 DO
        IF (dic.lookup(set2[i])=TRUE) THEN
            count := dic.get(set2[i]);
            dic.insert(set2[i], count+1)
        ELSE
           dic.insert(set2[i], 1);
        END_IF
    END_FOR

    //The sum of elements
    sum = 0;
    setKeys := getKeys(dic);
    FOR i FROM 0 TO setKeys.length-1 DO
        IF (dic.get(setKeys[i])=1) THEN
            sum := sum + setKeys[i];
        END_IF
    END_FOR
    Write("Sum of distinct elements = ", sum);
END

//----------------------- END Problem 1.
